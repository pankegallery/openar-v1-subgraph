/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MediaInterface extends ethers.utils.Interface {
  functions: {
    "MINT_AROBJECT_TYPEHASH()": FunctionFragment;
    "MINT_WITH_SIG_TYPEHASH()": FunctionFragment;
    "PERMIT_TYPEHASH()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "auctionTransfer(uint256,address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "baseURI()": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "configure(address)": FunctionFragment;
    "creatorBalanceOf(address)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isApprovedOrOwner(address,uint256)": FunctionFragment;
    "isCreated(uint256)": FunctionFragment;
    "marketContract()": FunctionFragment;
    "mint(tuple,tuple)": FunctionFragment;
    "mintArObject(address,string[],string[],bytes32[],bytes32[],tuple,tuple,tuple)": FunctionFragment;
    "mintWithSig(address,tuple,tuple,uint256,tuple)": FunctionFragment;
    "mintWithSigNonces(address)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "permit(address,uint256,tuple)": FunctionFragment;
    "permitNonces(address,uint256)": FunctionFragment;
    "previousTokenOwners(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "revokeApproval(uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenContentHashes(uint256)": FunctionFragment;
    "tokenCreators(uint256)": FunctionFragment;
    "tokenMediaData(uint256)": FunctionFragment;
    "tokenMetadataHashes(uint256)": FunctionFragment;
    "tokenMetadataURI(uint256)": FunctionFragment;
    "tokenOfCreatorByIndex(address,uint256)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateTokenMetadataURI(uint256,string)": FunctionFragment;
    "updateTokenURI(uint256,string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MINT_AROBJECT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINT_WITH_SIG_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERMIT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionTransfer",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "baseURI", values?: undefined): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "configure", values: [string]): string;
  encodeFunctionData(
    functionFragment: "creatorBalanceOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedOrOwner",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isCreated",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "marketContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [
      {
        tokenURI: string;
        metadataURI: string;
        awKeyHex: BytesLike;
        objKeyHex: BytesLike;
        contentHash: BytesLike;
        metadataHash: BytesLike;
        editionOf: BigNumberish;
        editionNumber: BigNumberish;
      },
      {
        platform: { value: BigNumberish };
        pool: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
        prevOwner: { value: BigNumberish };
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintArObject",
    values: [
      string,
      string[],
      string[],
      BytesLike[],
      BytesLike[],
      {
        awKeyHex: BytesLike;
        objKeyHex: BytesLike;
        editionOf: BigNumberish;
        initialAsk: BigNumberish;
        mintArObjectNonce: BigNumberish;
        currency: string;
        setInitialAsk: boolean;
      },
      {
        platform: { value: BigNumberish };
        pool: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
        prevOwner: { value: BigNumberish };
      },
      { deadline: BigNumberish; v: BigNumberish; r: BytesLike; s: BytesLike }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintWithSig",
    values: [
      string,
      {
        tokenURI: string;
        metadataURI: string;
        awKeyHex: BytesLike;
        objKeyHex: BytesLike;
        contentHash: BytesLike;
        metadataHash: BytesLike;
        editionOf: BigNumberish;
        editionNumber: BigNumberish;
      },
      {
        platform: { value: BigNumberish };
        pool: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
        prevOwner: { value: BigNumberish };
      },
      BigNumberish,
      { deadline: BigNumberish; v: BigNumberish; r: BytesLike; s: BytesLike }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintWithSigNonces",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      string,
      BigNumberish,
      { deadline: BigNumberish; v: BigNumberish; r: BytesLike; s: BytesLike }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "permitNonces",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previousTokenOwners",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeApproval",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenContentHashes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenCreators",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenMediaData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenMetadataHashes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenMetadataURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfCreatorByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTokenMetadataURI",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTokenURI",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "MINT_AROBJECT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINT_WITH_SIG_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERMIT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "auctionTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "configure", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "creatorBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedOrOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isCreated", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintArObject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintWithSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintWithSigNonces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "permitNonces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previousTokenOwners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenContentHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenCreators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenMediaData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenMetadataHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenMetadataURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfCreatorByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTokenMetadataURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTokenURI",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TokenMetadataURIUpdated(uint256,address,string)": EventFragment;
    "TokenObjectMinted(uint256[],tuple)": EventFragment;
    "TokenURIUpdated(uint256,address,string)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenMetadataURIUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenObjectMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenURIUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class Media extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MediaInterface;

  functions: {
    MINT_AROBJECT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    "MINT_AROBJECT_TYPEHASH()"(overrides?: CallOverrides): Promise<[string]>;

    MINT_WITH_SIG_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    "MINT_WITH_SIG_TYPEHASH()"(overrides?: CallOverrides): Promise<[string]>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    "PERMIT_TYPEHASH()"(overrides?: CallOverrides): Promise<[string]>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    auctionTransfer(
      tokenId: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "auctionTransfer(uint256,address)"(
      tokenId: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    baseURI(overrides?: CallOverrides): Promise<[string]>;

    "baseURI()"(overrides?: CallOverrides): Promise<[string]>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "burn(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    configure(
      marketContractAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "configure(address)"(
      marketContractAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    creatorBalanceOf(
      creator: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "creatorBalanceOf(address)"(
      creator: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isApprovedOrOwner(
      actor: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "isApprovedOrOwner(address,uint256)"(
      actor: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isCreated(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "isCreated(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    marketContract(overrides?: CallOverrides): Promise<[string]>;

    "marketContract()"(overrides?: CallOverrides): Promise<[string]>;

    mint(
      data: {
        tokenURI: string;
        metadataURI: string;
        awKeyHex: BytesLike;
        objKeyHex: BytesLike;
        contentHash: BytesLike;
        metadataHash: BytesLike;
        editionOf: BigNumberish;
        editionNumber: BigNumberish;
      },
      bidShares: {
        platform: { value: BigNumberish };
        pool: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
        prevOwner: { value: BigNumberish };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "mint((string,string,bytes32,bytes32,bytes32,bytes32,uint256,uint256),((uint256),(uint256),(uint256),(uint256),(uint256)))"(
      data: {
        tokenURI: string;
        metadataURI: string;
        awKeyHex: BytesLike;
        objKeyHex: BytesLike;
        contentHash: BytesLike;
        metadataHash: BytesLike;
        editionOf: BigNumberish;
        editionNumber: BigNumberish;
      },
      bidShares: {
        platform: { value: BigNumberish };
        pool: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
        prevOwner: { value: BigNumberish };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintArObject(
      creator: string,
      tokenURIs: string[],
      metadataURIs: string[],
      contentHashes: BytesLike[],
      metadataHashes: BytesLike[],
      data: {
        awKeyHex: BytesLike;
        objKeyHex: BytesLike;
        editionOf: BigNumberish;
        initialAsk: BigNumberish;
        mintArObjectNonce: BigNumberish;
        currency: string;
        setInitialAsk: boolean;
      },
      bidShares: {
        platform: { value: BigNumberish };
        pool: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
        prevOwner: { value: BigNumberish };
      },
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "mintArObject(address,string[],string[],bytes32[],bytes32[],(bytes32,bytes32,uint256,uint256,uint256,address,bool),((uint256),(uint256),(uint256),(uint256),(uint256)),(uint256,uint8,bytes32,bytes32))"(
      creator: string,
      tokenURIs: string[],
      metadataURIs: string[],
      contentHashes: BytesLike[],
      metadataHashes: BytesLike[],
      data: {
        awKeyHex: BytesLike;
        objKeyHex: BytesLike;
        editionOf: BigNumberish;
        initialAsk: BigNumberish;
        mintArObjectNonce: BigNumberish;
        currency: string;
        setInitialAsk: boolean;
      },
      bidShares: {
        platform: { value: BigNumberish };
        pool: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
        prevOwner: { value: BigNumberish };
      },
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintWithSig(
      creator: string,
      data: {
        tokenURI: string;
        metadataURI: string;
        awKeyHex: BytesLike;
        objKeyHex: BytesLike;
        contentHash: BytesLike;
        metadataHash: BytesLike;
        editionOf: BigNumberish;
        editionNumber: BigNumberish;
      },
      bidShares: {
        platform: { value: BigNumberish };
        pool: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
        prevOwner: { value: BigNumberish };
      },
      mintWithSigNonce: BigNumberish,
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "mintWithSig(address,(string,string,bytes32,bytes32,bytes32,bytes32,uint256,uint256),((uint256),(uint256),(uint256),(uint256),(uint256)),uint256,(uint256,uint8,bytes32,bytes32))"(
      creator: string,
      data: {
        tokenURI: string;
        metadataURI: string;
        awKeyHex: BytesLike;
        objKeyHex: BytesLike;
        contentHash: BytesLike;
        metadataHash: BytesLike;
        editionOf: BigNumberish;
        editionNumber: BigNumberish;
      },
      bidShares: {
        platform: { value: BigNumberish };
        pool: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
        prevOwner: { value: BigNumberish };
      },
      mintWithSigNonce: BigNumberish,
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintWithSigNonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "mintWithSigNonces(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    permit(
      spender: string,
      tokenId: BigNumberish,
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "permit(address,uint256,(uint256,uint8,bytes32,bytes32))"(
      spender: string,
      tokenId: BigNumberish,
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    permitNonces(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "permitNonces(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    previousTokenOwners(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "previousTokenOwners(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeApproval(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "revokeApproval(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    "symbol()"(overrides?: CallOverrides): Promise<[string]>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "tokenByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenContentHashes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "tokenContentHashes(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokenCreators(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "tokenCreators(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokenMediaData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber] & {
        awKeyHex: string;
        objKeyHex: string;
        editionOf: BigNumber;
        editionNumber: BigNumber;
      }
    >;

    "tokenMediaData(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber] & {
        awKeyHex: string;
        objKeyHex: string;
        editionOf: BigNumber;
        editionNumber: BigNumber;
      }
    >;

    tokenMetadataHashes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "tokenMetadataHashes(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokenMetadataURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "tokenMetadataURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokenOfCreatorByIndex(
      creator: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "tokenOfCreatorByIndex(address,uint256)"(
      creator: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "tokenOfOwnerByIndex(address,uint256)"(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateTokenMetadataURI(
      tokenId: BigNumberish,
      metadataURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateTokenMetadataURI(uint256,string)"(
      tokenId: BigNumberish,
      metadataURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateTokenURI(
      tokenId: BigNumberish,
      tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateTokenURI(uint256,string)"(
      tokenId: BigNumberish,
      tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  MINT_AROBJECT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  "MINT_AROBJECT_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

  MINT_WITH_SIG_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  "MINT_WITH_SIG_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

  PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  "PERMIT_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  auctionTransfer(
    tokenId: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "auctionTransfer(uint256,address)"(
    tokenId: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  baseURI(overrides?: CallOverrides): Promise<string>;

  "baseURI()"(overrides?: CallOverrides): Promise<string>;

  burn(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "burn(uint256)"(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  configure(
    marketContractAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "configure(address)"(
    marketContractAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  creatorBalanceOf(
    creator: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "creatorBalanceOf(address)"(
    creator: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getApproved(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isApprovedForAll(address,address)"(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isApprovedOrOwner(
    actor: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "isApprovedOrOwner(address,uint256)"(
    actor: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isCreated(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "isCreated(uint256)"(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  marketContract(overrides?: CallOverrides): Promise<string>;

  "marketContract()"(overrides?: CallOverrides): Promise<string>;

  mint(
    data: {
      tokenURI: string;
      metadataURI: string;
      awKeyHex: BytesLike;
      objKeyHex: BytesLike;
      contentHash: BytesLike;
      metadataHash: BytesLike;
      editionOf: BigNumberish;
      editionNumber: BigNumberish;
    },
    bidShares: {
      platform: { value: BigNumberish };
      pool: { value: BigNumberish };
      creator: { value: BigNumberish };
      owner: { value: BigNumberish };
      prevOwner: { value: BigNumberish };
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "mint((string,string,bytes32,bytes32,bytes32,bytes32,uint256,uint256),((uint256),(uint256),(uint256),(uint256),(uint256)))"(
    data: {
      tokenURI: string;
      metadataURI: string;
      awKeyHex: BytesLike;
      objKeyHex: BytesLike;
      contentHash: BytesLike;
      metadataHash: BytesLike;
      editionOf: BigNumberish;
      editionNumber: BigNumberish;
    },
    bidShares: {
      platform: { value: BigNumberish };
      pool: { value: BigNumberish };
      creator: { value: BigNumberish };
      owner: { value: BigNumberish };
      prevOwner: { value: BigNumberish };
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintArObject(
    creator: string,
    tokenURIs: string[],
    metadataURIs: string[],
    contentHashes: BytesLike[],
    metadataHashes: BytesLike[],
    data: {
      awKeyHex: BytesLike;
      objKeyHex: BytesLike;
      editionOf: BigNumberish;
      initialAsk: BigNumberish;
      mintArObjectNonce: BigNumberish;
      currency: string;
      setInitialAsk: boolean;
    },
    bidShares: {
      platform: { value: BigNumberish };
      pool: { value: BigNumberish };
      creator: { value: BigNumberish };
      owner: { value: BigNumberish };
      prevOwner: { value: BigNumberish };
    },
    sig: {
      deadline: BigNumberish;
      v: BigNumberish;
      r: BytesLike;
      s: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "mintArObject(address,string[],string[],bytes32[],bytes32[],(bytes32,bytes32,uint256,uint256,uint256,address,bool),((uint256),(uint256),(uint256),(uint256),(uint256)),(uint256,uint8,bytes32,bytes32))"(
    creator: string,
    tokenURIs: string[],
    metadataURIs: string[],
    contentHashes: BytesLike[],
    metadataHashes: BytesLike[],
    data: {
      awKeyHex: BytesLike;
      objKeyHex: BytesLike;
      editionOf: BigNumberish;
      initialAsk: BigNumberish;
      mintArObjectNonce: BigNumberish;
      currency: string;
      setInitialAsk: boolean;
    },
    bidShares: {
      platform: { value: BigNumberish };
      pool: { value: BigNumberish };
      creator: { value: BigNumberish };
      owner: { value: BigNumberish };
      prevOwner: { value: BigNumberish };
    },
    sig: {
      deadline: BigNumberish;
      v: BigNumberish;
      r: BytesLike;
      s: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintWithSig(
    creator: string,
    data: {
      tokenURI: string;
      metadataURI: string;
      awKeyHex: BytesLike;
      objKeyHex: BytesLike;
      contentHash: BytesLike;
      metadataHash: BytesLike;
      editionOf: BigNumberish;
      editionNumber: BigNumberish;
    },
    bidShares: {
      platform: { value: BigNumberish };
      pool: { value: BigNumberish };
      creator: { value: BigNumberish };
      owner: { value: BigNumberish };
      prevOwner: { value: BigNumberish };
    },
    mintWithSigNonce: BigNumberish,
    sig: {
      deadline: BigNumberish;
      v: BigNumberish;
      r: BytesLike;
      s: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "mintWithSig(address,(string,string,bytes32,bytes32,bytes32,bytes32,uint256,uint256),((uint256),(uint256),(uint256),(uint256),(uint256)),uint256,(uint256,uint8,bytes32,bytes32))"(
    creator: string,
    data: {
      tokenURI: string;
      metadataURI: string;
      awKeyHex: BytesLike;
      objKeyHex: BytesLike;
      contentHash: BytesLike;
      metadataHash: BytesLike;
      editionOf: BigNumberish;
      editionNumber: BigNumberish;
    },
    bidShares: {
      platform: { value: BigNumberish };
      pool: { value: BigNumberish };
      creator: { value: BigNumberish };
      owner: { value: BigNumberish };
      prevOwner: { value: BigNumberish };
    },
    mintWithSigNonce: BigNumberish,
    sig: {
      deadline: BigNumberish;
      v: BigNumberish;
      r: BytesLike;
      s: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintWithSigNonces(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "mintWithSigNonces(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "ownerOf(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  permit(
    spender: string,
    tokenId: BigNumberish,
    sig: {
      deadline: BigNumberish;
      v: BigNumberish;
      r: BytesLike;
      s: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "permit(address,uint256,(uint256,uint8,bytes32,bytes32))"(
    spender: string,
    tokenId: BigNumberish,
    sig: {
      deadline: BigNumberish;
      v: BigNumberish;
      r: BytesLike;
      s: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  permitNonces(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "permitNonces(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  previousTokenOwners(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "previousTokenOwners(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeApproval(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "revokeApproval(uint256)"(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setApprovalForAll(address,bool)"(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  tokenByIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "tokenByIndex(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenContentHashes(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "tokenContentHashes(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  tokenCreators(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "tokenCreators(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  tokenMediaData(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber] & {
      awKeyHex: string;
      objKeyHex: string;
      editionOf: BigNumber;
      editionNumber: BigNumber;
    }
  >;

  "tokenMediaData(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber] & {
      awKeyHex: string;
      objKeyHex: string;
      editionOf: BigNumber;
      editionNumber: BigNumber;
    }
  >;

  tokenMetadataHashes(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "tokenMetadataHashes(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  tokenMetadataURI(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "tokenMetadataURI(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  tokenOfCreatorByIndex(
    creator: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "tokenOfCreatorByIndex(address,uint256)"(
    creator: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "tokenOfOwnerByIndex(address,uint256)"(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "tokenURI(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateTokenMetadataURI(
    tokenId: BigNumberish,
    metadataURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateTokenMetadataURI(uint256,string)"(
    tokenId: BigNumberish,
    metadataURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateTokenURI(
    tokenId: BigNumberish,
    tokenURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateTokenURI(uint256,string)"(
    tokenId: BigNumberish,
    tokenURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MINT_AROBJECT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    "MINT_AROBJECT_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

    MINT_WITH_SIG_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    "MINT_WITH_SIG_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    "PERMIT_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    auctionTransfer(
      tokenId: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "auctionTransfer(uint256,address)"(
      tokenId: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<string>;

    "baseURI()"(overrides?: CallOverrides): Promise<string>;

    burn(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "burn(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    configure(
      marketContractAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "configure(address)"(
      marketContractAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    creatorBalanceOf(
      creator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "creatorBalanceOf(address)"(
      creator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isApprovedOrOwner(
      actor: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isApprovedOrOwner(address,uint256)"(
      actor: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isCreated(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isCreated(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    marketContract(overrides?: CallOverrides): Promise<string>;

    "marketContract()"(overrides?: CallOverrides): Promise<string>;

    mint(
      data: {
        tokenURI: string;
        metadataURI: string;
        awKeyHex: BytesLike;
        objKeyHex: BytesLike;
        contentHash: BytesLike;
        metadataHash: BytesLike;
        editionOf: BigNumberish;
        editionNumber: BigNumberish;
      },
      bidShares: {
        platform: { value: BigNumberish };
        pool: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
        prevOwner: { value: BigNumberish };
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "mint((string,string,bytes32,bytes32,bytes32,bytes32,uint256,uint256),((uint256),(uint256),(uint256),(uint256),(uint256)))"(
      data: {
        tokenURI: string;
        metadataURI: string;
        awKeyHex: BytesLike;
        objKeyHex: BytesLike;
        contentHash: BytesLike;
        metadataHash: BytesLike;
        editionOf: BigNumberish;
        editionNumber: BigNumberish;
      },
      bidShares: {
        platform: { value: BigNumberish };
        pool: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
        prevOwner: { value: BigNumberish };
      },
      overrides?: CallOverrides
    ): Promise<void>;

    mintArObject(
      creator: string,
      tokenURIs: string[],
      metadataURIs: string[],
      contentHashes: BytesLike[],
      metadataHashes: BytesLike[],
      data: {
        awKeyHex: BytesLike;
        objKeyHex: BytesLike;
        editionOf: BigNumberish;
        initialAsk: BigNumberish;
        mintArObjectNonce: BigNumberish;
        currency: string;
        setInitialAsk: boolean;
      },
      bidShares: {
        platform: { value: BigNumberish };
        pool: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
        prevOwner: { value: BigNumberish };
      },
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "mintArObject(address,string[],string[],bytes32[],bytes32[],(bytes32,bytes32,uint256,uint256,uint256,address,bool),((uint256),(uint256),(uint256),(uint256),(uint256)),(uint256,uint8,bytes32,bytes32))"(
      creator: string,
      tokenURIs: string[],
      metadataURIs: string[],
      contentHashes: BytesLike[],
      metadataHashes: BytesLike[],
      data: {
        awKeyHex: BytesLike;
        objKeyHex: BytesLike;
        editionOf: BigNumberish;
        initialAsk: BigNumberish;
        mintArObjectNonce: BigNumberish;
        currency: string;
        setInitialAsk: boolean;
      },
      bidShares: {
        platform: { value: BigNumberish };
        pool: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
        prevOwner: { value: BigNumberish };
      },
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    mintWithSig(
      creator: string,
      data: {
        tokenURI: string;
        metadataURI: string;
        awKeyHex: BytesLike;
        objKeyHex: BytesLike;
        contentHash: BytesLike;
        metadataHash: BytesLike;
        editionOf: BigNumberish;
        editionNumber: BigNumberish;
      },
      bidShares: {
        platform: { value: BigNumberish };
        pool: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
        prevOwner: { value: BigNumberish };
      },
      mintWithSigNonce: BigNumberish,
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "mintWithSig(address,(string,string,bytes32,bytes32,bytes32,bytes32,uint256,uint256),((uint256),(uint256),(uint256),(uint256),(uint256)),uint256,(uint256,uint8,bytes32,bytes32))"(
      creator: string,
      data: {
        tokenURI: string;
        metadataURI: string;
        awKeyHex: BytesLike;
        objKeyHex: BytesLike;
        contentHash: BytesLike;
        metadataHash: BytesLike;
        editionOf: BigNumberish;
        editionNumber: BigNumberish;
      },
      bidShares: {
        platform: { value: BigNumberish };
        pool: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
        prevOwner: { value: BigNumberish };
      },
      mintWithSigNonce: BigNumberish,
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    mintWithSigNonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "mintWithSigNonces(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    permit(
      spender: string,
      tokenId: BigNumberish,
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "permit(address,uint256,(uint256,uint8,bytes32,bytes32))"(
      spender: string,
      tokenId: BigNumberish,
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    permitNonces(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "permitNonces(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previousTokenOwners(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "previousTokenOwners(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    revokeApproval(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeApproval(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenContentHashes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "tokenContentHashes(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    tokenCreators(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "tokenCreators(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    tokenMediaData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber] & {
        awKeyHex: string;
        objKeyHex: string;
        editionOf: BigNumber;
        editionNumber: BigNumber;
      }
    >;

    "tokenMediaData(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber] & {
        awKeyHex: string;
        objKeyHex: string;
        editionOf: BigNumber;
        editionNumber: BigNumber;
      }
    >;

    tokenMetadataHashes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "tokenMetadataHashes(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    tokenMetadataURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "tokenMetadataURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    tokenOfCreatorByIndex(
      creator: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenOfCreatorByIndex(address,uint256)"(
      creator: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenOfOwnerByIndex(address,uint256)"(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTokenMetadataURI(
      tokenId: BigNumberish,
      metadataURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateTokenMetadataURI(uint256,string)"(
      tokenId: BigNumberish,
      metadataURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTokenURI(
      tokenId: BigNumberish,
      tokenURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateTokenURI(uint256,string)"(
      tokenId: BigNumberish,
      tokenURI: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Approval(
      owner: string | null,
      approved: string | null,
      tokenId: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; approved: string; tokenId: BigNumber }
    >;

    ApprovalForAll(
      owner: string | null,
      operator: string | null,
      approved: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    TokenMetadataURIUpdated(
      _tokenId: BigNumberish | null,
      owner: null,
      _uri: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { _tokenId: BigNumber; owner: string; _uri: string }
    >;

    TokenObjectMinted(
      tokenIds: null,
      data: null
    ): TypedEventFilter<
      [
        BigNumber[],
        [string, string, BigNumber] & {
          awKeyHex: string;
          objKeyHex: string;
          editionOf: BigNumber;
        }
      ],
      {
        tokenIds: BigNumber[];
        data: [string, string, BigNumber] & {
          awKeyHex: string;
          objKeyHex: string;
          editionOf: BigNumber;
        };
      }
    >;

    TokenURIUpdated(
      _tokenId: BigNumberish | null,
      owner: null,
      _uri: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { _tokenId: BigNumber; owner: string; _uri: string }
    >;

    Transfer(
      from: string | null,
      to: string | null,
      tokenId: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokenId: BigNumber }
    >;
  };

  estimateGas: {
    MINT_AROBJECT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    "MINT_AROBJECT_TYPEHASH()"(overrides?: CallOverrides): Promise<BigNumber>;

    MINT_WITH_SIG_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    "MINT_WITH_SIG_TYPEHASH()"(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    "PERMIT_TYPEHASH()"(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    auctionTransfer(
      tokenId: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "auctionTransfer(uint256,address)"(
      tokenId: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<BigNumber>;

    "baseURI()"(overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "burn(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    configure(
      marketContractAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "configure(address)"(
      marketContractAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    creatorBalanceOf(
      creator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "creatorBalanceOf(address)"(
      creator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedOrOwner(
      actor: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "isApprovedOrOwner(address,uint256)"(
      actor: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isCreated(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "isCreated(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    marketContract(overrides?: CallOverrides): Promise<BigNumber>;

    "marketContract()"(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      data: {
        tokenURI: string;
        metadataURI: string;
        awKeyHex: BytesLike;
        objKeyHex: BytesLike;
        contentHash: BytesLike;
        metadataHash: BytesLike;
        editionOf: BigNumberish;
        editionNumber: BigNumberish;
      },
      bidShares: {
        platform: { value: BigNumberish };
        pool: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
        prevOwner: { value: BigNumberish };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "mint((string,string,bytes32,bytes32,bytes32,bytes32,uint256,uint256),((uint256),(uint256),(uint256),(uint256),(uint256)))"(
      data: {
        tokenURI: string;
        metadataURI: string;
        awKeyHex: BytesLike;
        objKeyHex: BytesLike;
        contentHash: BytesLike;
        metadataHash: BytesLike;
        editionOf: BigNumberish;
        editionNumber: BigNumberish;
      },
      bidShares: {
        platform: { value: BigNumberish };
        pool: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
        prevOwner: { value: BigNumberish };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintArObject(
      creator: string,
      tokenURIs: string[],
      metadataURIs: string[],
      contentHashes: BytesLike[],
      metadataHashes: BytesLike[],
      data: {
        awKeyHex: BytesLike;
        objKeyHex: BytesLike;
        editionOf: BigNumberish;
        initialAsk: BigNumberish;
        mintArObjectNonce: BigNumberish;
        currency: string;
        setInitialAsk: boolean;
      },
      bidShares: {
        platform: { value: BigNumberish };
        pool: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
        prevOwner: { value: BigNumberish };
      },
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "mintArObject(address,string[],string[],bytes32[],bytes32[],(bytes32,bytes32,uint256,uint256,uint256,address,bool),((uint256),(uint256),(uint256),(uint256),(uint256)),(uint256,uint8,bytes32,bytes32))"(
      creator: string,
      tokenURIs: string[],
      metadataURIs: string[],
      contentHashes: BytesLike[],
      metadataHashes: BytesLike[],
      data: {
        awKeyHex: BytesLike;
        objKeyHex: BytesLike;
        editionOf: BigNumberish;
        initialAsk: BigNumberish;
        mintArObjectNonce: BigNumberish;
        currency: string;
        setInitialAsk: boolean;
      },
      bidShares: {
        platform: { value: BigNumberish };
        pool: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
        prevOwner: { value: BigNumberish };
      },
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintWithSig(
      creator: string,
      data: {
        tokenURI: string;
        metadataURI: string;
        awKeyHex: BytesLike;
        objKeyHex: BytesLike;
        contentHash: BytesLike;
        metadataHash: BytesLike;
        editionOf: BigNumberish;
        editionNumber: BigNumberish;
      },
      bidShares: {
        platform: { value: BigNumberish };
        pool: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
        prevOwner: { value: BigNumberish };
      },
      mintWithSigNonce: BigNumberish,
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "mintWithSig(address,(string,string,bytes32,bytes32,bytes32,bytes32,uint256,uint256),((uint256),(uint256),(uint256),(uint256),(uint256)),uint256,(uint256,uint8,bytes32,bytes32))"(
      creator: string,
      data: {
        tokenURI: string;
        metadataURI: string;
        awKeyHex: BytesLike;
        objKeyHex: BytesLike;
        contentHash: BytesLike;
        metadataHash: BytesLike;
        editionOf: BigNumberish;
        editionNumber: BigNumberish;
      },
      bidShares: {
        platform: { value: BigNumberish };
        pool: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
        prevOwner: { value: BigNumberish };
      },
      mintWithSigNonce: BigNumberish,
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintWithSigNonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "mintWithSigNonces(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    permit(
      spender: string,
      tokenId: BigNumberish,
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "permit(address,uint256,(uint256,uint8,bytes32,bytes32))"(
      spender: string,
      tokenId: BigNumberish,
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    permitNonces(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "permitNonces(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previousTokenOwners(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "previousTokenOwners(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeApproval(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "revokeApproval(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenContentHashes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenContentHashes(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenCreators(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenCreators(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenMediaData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenMediaData(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenMetadataHashes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenMetadataHashes(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenMetadataURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenMetadataURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfCreatorByIndex(
      creator: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenOfCreatorByIndex(address,uint256)"(
      creator: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenOfOwnerByIndex(address,uint256)"(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateTokenMetadataURI(
      tokenId: BigNumberish,
      metadataURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateTokenMetadataURI(uint256,string)"(
      tokenId: BigNumberish,
      metadataURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateTokenURI(
      tokenId: BigNumberish,
      tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateTokenURI(uint256,string)"(
      tokenId: BigNumberish,
      tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MINT_AROBJECT_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "MINT_AROBJECT_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MINT_WITH_SIG_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "MINT_WITH_SIG_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "PERMIT_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    auctionTransfer(
      tokenId: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "auctionTransfer(uint256,address)"(
      tokenId: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "baseURI()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "burn(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    configure(
      marketContractAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "configure(address)"(
      marketContractAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    creatorBalanceOf(
      creator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "creatorBalanceOf(address)"(
      creator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedOrOwner(
      actor: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "isApprovedOrOwner(address,uint256)"(
      actor: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isCreated(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "isCreated(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    marketContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "marketContract()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      data: {
        tokenURI: string;
        metadataURI: string;
        awKeyHex: BytesLike;
        objKeyHex: BytesLike;
        contentHash: BytesLike;
        metadataHash: BytesLike;
        editionOf: BigNumberish;
        editionNumber: BigNumberish;
      },
      bidShares: {
        platform: { value: BigNumberish };
        pool: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
        prevOwner: { value: BigNumberish };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "mint((string,string,bytes32,bytes32,bytes32,bytes32,uint256,uint256),((uint256),(uint256),(uint256),(uint256),(uint256)))"(
      data: {
        tokenURI: string;
        metadataURI: string;
        awKeyHex: BytesLike;
        objKeyHex: BytesLike;
        contentHash: BytesLike;
        metadataHash: BytesLike;
        editionOf: BigNumberish;
        editionNumber: BigNumberish;
      },
      bidShares: {
        platform: { value: BigNumberish };
        pool: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
        prevOwner: { value: BigNumberish };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintArObject(
      creator: string,
      tokenURIs: string[],
      metadataURIs: string[],
      contentHashes: BytesLike[],
      metadataHashes: BytesLike[],
      data: {
        awKeyHex: BytesLike;
        objKeyHex: BytesLike;
        editionOf: BigNumberish;
        initialAsk: BigNumberish;
        mintArObjectNonce: BigNumberish;
        currency: string;
        setInitialAsk: boolean;
      },
      bidShares: {
        platform: { value: BigNumberish };
        pool: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
        prevOwner: { value: BigNumberish };
      },
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "mintArObject(address,string[],string[],bytes32[],bytes32[],(bytes32,bytes32,uint256,uint256,uint256,address,bool),((uint256),(uint256),(uint256),(uint256),(uint256)),(uint256,uint8,bytes32,bytes32))"(
      creator: string,
      tokenURIs: string[],
      metadataURIs: string[],
      contentHashes: BytesLike[],
      metadataHashes: BytesLike[],
      data: {
        awKeyHex: BytesLike;
        objKeyHex: BytesLike;
        editionOf: BigNumberish;
        initialAsk: BigNumberish;
        mintArObjectNonce: BigNumberish;
        currency: string;
        setInitialAsk: boolean;
      },
      bidShares: {
        platform: { value: BigNumberish };
        pool: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
        prevOwner: { value: BigNumberish };
      },
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintWithSig(
      creator: string,
      data: {
        tokenURI: string;
        metadataURI: string;
        awKeyHex: BytesLike;
        objKeyHex: BytesLike;
        contentHash: BytesLike;
        metadataHash: BytesLike;
        editionOf: BigNumberish;
        editionNumber: BigNumberish;
      },
      bidShares: {
        platform: { value: BigNumberish };
        pool: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
        prevOwner: { value: BigNumberish };
      },
      mintWithSigNonce: BigNumberish,
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "mintWithSig(address,(string,string,bytes32,bytes32,bytes32,bytes32,uint256,uint256),((uint256),(uint256),(uint256),(uint256),(uint256)),uint256,(uint256,uint8,bytes32,bytes32))"(
      creator: string,
      data: {
        tokenURI: string;
        metadataURI: string;
        awKeyHex: BytesLike;
        objKeyHex: BytesLike;
        contentHash: BytesLike;
        metadataHash: BytesLike;
        editionOf: BigNumberish;
        editionNumber: BigNumberish;
      },
      bidShares: {
        platform: { value: BigNumberish };
        pool: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
        prevOwner: { value: BigNumberish };
      },
      mintWithSigNonce: BigNumberish,
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintWithSigNonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "mintWithSigNonces(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permit(
      spender: string,
      tokenId: BigNumberish,
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "permit(address,uint256,(uint256,uint8,bytes32,bytes32))"(
      spender: string,
      tokenId: BigNumberish,
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    permitNonces(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "permitNonces(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previousTokenOwners(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "previousTokenOwners(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeApproval(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "revokeApproval(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenContentHashes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenContentHashes(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenCreators(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenCreators(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenMediaData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenMediaData(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenMetadataHashes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenMetadataHashes(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenMetadataURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenMetadataURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOfCreatorByIndex(
      creator: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenOfCreatorByIndex(address,uint256)"(
      creator: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenOfOwnerByIndex(address,uint256)"(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateTokenMetadataURI(
      tokenId: BigNumberish,
      metadataURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateTokenMetadataURI(uint256,string)"(
      tokenId: BigNumberish,
      metadataURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateTokenURI(
      tokenId: BigNumberish,
      tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateTokenURI(uint256,string)"(
      tokenId: BigNumberish,
      tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
